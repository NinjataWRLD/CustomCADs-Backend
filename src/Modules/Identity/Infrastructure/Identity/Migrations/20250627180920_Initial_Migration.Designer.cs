// <auto-generated />

using System;
using CustomCADs.Identity.Infrastructure.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable


namespace CustomCADs.Identity.Infrastructure.Identity.Migrations
{
	[DbContext(typeof(IdentityContext))]
	[Migration("20250627180920_Initial_Migration")]
	partial class Initial_Migration
	{
		/// <inheritdoc />
		protected override void BuildTargetModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder
				.HasDefaultSchema("Identity")
				.HasAnnotation("ProductVersion", "9.0.4")
				.HasAnnotation("Relational:MaxIdentifierLength", 63);

			NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

			modelBuilder.Entity("CustomCADs.Identity.Persistence.ShadowEntities.AppRefreshToken", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<DateTimeOffset>("ExpiresAt")
						.HasColumnType("timestamp with time zone")
						.HasColumnName("ExpiresAt");

					b.Property<DateTimeOffset>("IssuedAt")
						.HasColumnType("timestamp with time zone")
						.HasColumnName("IssuedAt");

					b.Property<Guid>("UserId")
						.HasColumnType("uuid")
						.HasColumnName("UserId");

					b.Property<string>("Value")
						.IsRequired()
						.HasColumnType("text")
						.HasColumnName("Value");

					b.HasKey("Id");

					b.HasIndex("UserId");

					b.ToTable("AppRefreshToken", "Identity");
				});

			modelBuilder.Entity("CustomCADs.Identity.Persistence.ShadowEntities.AppRole", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken()
						.HasColumnType("text");

					b.Property<string>("Name")
						.HasMaxLength(256)
						.HasColumnType("character varying(256)");

					b.Property<string>("NormalizedName")
						.HasMaxLength(256)
						.HasColumnType("character varying(256)");

					b.HasKey("Id");

					b.HasIndex("NormalizedName")
						.IsUnique()
						.HasDatabaseName("RoleNameIndex");

					b.ToTable("AspNetRoles", "Identity");

					b.HasData(
						new
						{
							Id = new Guid("762ddec2-25c9-4183-9891-72a19d84a839"),
							ConcurrencyStamp = "51da1b9f-803c-4bd3-9a00-da7ac259ce32",
							Name = "Customer",
							NormalizedName = "CUSTOMER"
						},
						new
						{
							Id = new Guid("e1101e2c-32cc-456f-9c82-4f1d1a65d141"),
							ConcurrencyStamp = "a1a170e0-ee84-4afe-afd9-1df57009f291",
							Name = "Contributor",
							NormalizedName = "CONTRIBUTOR"
						},
						new
						{
							Id = new Guid("f3ad41d3-ee90-4988-9195-8b2a8f4f2733"),
							ConcurrencyStamp = "1a8ba0a7-4853-42da-980d-3107784e7ab1",
							Name = "Designer",
							NormalizedName = "DESIGNER"
						},
						new
						{
							Id = new Guid("fad1b19d-5333-4633-bd84-d67c64649f65"),
							ConcurrencyStamp = "42174679-32f1-48b0-9524-0f00791ec760",
							Name = "Administrator",
							NormalizedName = "ADMINISTRATOR"
						});
				});

			modelBuilder.Entity("CustomCADs.Identity.Persistence.ShadowEntities.AppUser", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<int>("AccessFailedCount")
						.HasColumnType("integer");

					b.Property<Guid>("AccountId")
						.HasColumnType("uuid")
						.HasColumnName("AccountId");

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken()
						.HasColumnType("text");

					b.Property<string>("Email")
						.HasMaxLength(256)
						.HasColumnType("character varying(256)");

					b.Property<bool>("EmailConfirmed")
						.HasColumnType("boolean");

					b.Property<bool>("LockoutEnabled")
						.HasColumnType("boolean");

					b.Property<DateTimeOffset?>("LockoutEnd")
						.HasColumnType("timestamp with time zone");

					b.Property<string>("NormalizedEmail")
						.HasMaxLength(256)
						.HasColumnType("character varying(256)");

					b.Property<string>("NormalizedUserName")
						.HasMaxLength(256)
						.HasColumnType("character varying(256)");

					b.Property<string>("PasswordHash")
						.HasColumnType("text");

					b.Property<string>("PhoneNumber")
						.HasColumnType("text");

					b.Property<bool>("PhoneNumberConfirmed")
						.HasColumnType("boolean");

					b.Property<string>("SecurityStamp")
						.HasColumnType("text");

					b.Property<bool>("TwoFactorEnabled")
						.HasColumnType("boolean");

					b.Property<string>("UserName")
						.HasMaxLength(256)
						.HasColumnType("character varying(256)");

					b.HasKey("Id");

					b.HasIndex("NormalizedEmail")
						.HasDatabaseName("EmailIndex");

					b.HasIndex("NormalizedUserName")
						.IsUnique()
						.HasDatabaseName("UserNameIndex");

					b.ToTable("AspNetUsers", "Identity");

					b.HasData(
						new
						{
							Id = new Guid("e38c495f-b1f3-4226-d289-08dd11623eb9"),
							AccessFailedCount = 0,
							AccountId = new Guid("2da61b05-1a27-4af9-9df2-be4f1f4e835f"),
							ConcurrencyStamp = "0c5bbfb2-d132-407b-9b1b-e1e640ccc14e",
							Email = "ivanzlatinov006@gmail.com",
							EmailConfirmed = true,
							LockoutEnabled = true,
							NormalizedEmail = "IVANZLATINOV006@GMAIL.COM",
							NormalizedUserName = "FOR7A7A",
							PasswordHash = "AQAAAAIAAYagAAAAEJFCGOTxNAgjhqU5lrA63WEtv924ujxXHt0x1R70qlS8dV9Pzz4II8GOgjVOaRzuDQ==",
							PhoneNumberConfirmed = false,
							SecurityStamp = "3A6TFN6VVZNRZEG22J777XJTPQY7342B",
							TwoFactorEnabled = false,
							UserName = "For7a7a"
						},
						new
						{
							Id = new Guid("af840410-f3f2-4a3b-d28a-08dd11623eb9"),
							AccessFailedCount = 0,
							AccountId = new Guid("6d963818-23dc-4e9a-aaa8-b4c77252bc97"),
							ConcurrencyStamp = "c77927de-61e7-4d53-be8d-a5390fafc75c",
							Email = "PDMatsaliev20@codingburgas.bg",
							EmailConfirmed = true,
							LockoutEnabled = true,
							NormalizedEmail = "PDMATSALIEV20@CODINGBURGAS.BG",
							NormalizedUserName = "PDMATSALIEV20",
							PasswordHash = "AQAAAAIAAYagAAAAEGjQ1Zes3r2XJgjoHQykiyr11OgUEDw+YDnOKeENyN7Kqi9RWKKRCtwd7ZtEyywdYA==",
							PhoneNumberConfirmed = false,
							SecurityStamp = "NWGZ3JTQSDNS346DMU7RP4IT4BDLHIQC",
							TwoFactorEnabled = false,
							UserName = "PDMatsaliev20"
						},
						new
						{
							Id = new Guid("4337a774-2c5c-4c27-d28b-08dd11623eb9"),
							AccessFailedCount = 0,
							AccountId = new Guid("0fb3212f-7d51-4586-8fc2-0f333ec9fbc1"),
							ConcurrencyStamp = "c5940d6f-d5c0-4f84-a262-da9b07525c3c",
							Email = "boriskolev2006@gmail.com",
							EmailConfirmed = true,
							LockoutEnabled = true,
							NormalizedEmail = "BORISKOLEV2006@GMAIL.COM",
							NormalizedUserName = "ORACLE3000",
							PasswordHash = "AQAAAAIAAYagAAAAEEUe31maWfuZY6V8MQBzUWKerMKobDukREinVfML3Yl2z+Nr6IIQZKvX4WKqbTUw6w==",
							PhoneNumberConfirmed = false,
							SecurityStamp = "FNNIT3NPOZKZK2E67WFLV5R3RGVBX7LV",
							TwoFactorEnabled = false,
							UserName = "Oracle3000"
						},
						new
						{
							Id = new Guid("cb7749fb-3fff-4902-d28c-08dd11623eb9"),
							AccessFailedCount = 0,
							AccountId = new Guid("e995039c-a535-4f20-8288-7aadcb71b252"),
							ConcurrencyStamp = "5c94b43f-861c-4efa-a670-5627e49d354d",
							Email = "ivanangelov414@gmail.com",
							EmailConfirmed = true,
							LockoutEnabled = true,
							NormalizedEmail = "IVANANGELOV414@GMAIL.COM",
							NormalizedUserName = "NINJATABG",
							PasswordHash = "AQAAAAIAAYagAAAAEFqtQ33BvarNRyFcmV4z48fPBlIY8zd0de90qq3Cdm1Row+2WRmEjVJk1yPadBkrSA==",
							PhoneNumberConfirmed = false,
							SecurityStamp = "YIA26UZDSN2V2U5PVDEK4F3EJS3P5D3X",
							TwoFactorEnabled = false,
							UserName = "NinjataBG"
						});
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer");

					NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

					b.Property<string>("ClaimType")
						.HasColumnType("text");

					b.Property<string>("ClaimValue")
						.HasColumnType("text");

					b.Property<Guid>("RoleId")
						.HasColumnType("uuid");

					b.HasKey("Id");

					b.HasIndex("RoleId");

					b.ToTable("AspNetRoleClaims", "Identity");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("integer");

					NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

					b.Property<string>("ClaimType")
						.HasColumnType("text");

					b.Property<string>("ClaimValue")
						.HasColumnType("text");

					b.Property<Guid>("UserId")
						.HasColumnType("uuid");

					b.HasKey("Id");

					b.HasIndex("UserId");

					b.ToTable("AspNetUserClaims", "Identity");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
				{
					b.Property<string>("LoginProvider")
						.HasColumnType("text");

					b.Property<string>("ProviderKey")
						.HasColumnType("text");

					b.Property<string>("ProviderDisplayName")
						.HasColumnType("text");

					b.Property<Guid>("UserId")
						.HasColumnType("uuid");

					b.HasKey("LoginProvider", "ProviderKey");

					b.HasIndex("UserId");

					b.ToTable("AspNetUserLogins", "Identity");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
				{
					b.Property<Guid>("UserId")
						.HasColumnType("uuid");

					b.Property<Guid>("RoleId")
						.HasColumnType("uuid");

					b.HasKey("UserId", "RoleId");

					b.HasIndex("RoleId");

					b.ToTable("AspNetUserRoles", "Identity");

					b.HasData(
						new
						{
							UserId = new Guid("e38c495f-b1f3-4226-d289-08dd11623eb9"),
							RoleId = new Guid("762ddec2-25c9-4183-9891-72a19d84a839")
						},
						new
						{
							UserId = new Guid("af840410-f3f2-4a3b-d28a-08dd11623eb9"),
							RoleId = new Guid("e1101e2c-32cc-456f-9c82-4f1d1a65d141")
						},
						new
						{
							UserId = new Guid("4337a774-2c5c-4c27-d28b-08dd11623eb9"),
							RoleId = new Guid("f3ad41d3-ee90-4988-9195-8b2a8f4f2733")
						},
						new
						{
							UserId = new Guid("cb7749fb-3fff-4902-d28c-08dd11623eb9"),
							RoleId = new Guid("fad1b19d-5333-4633-bd84-d67c64649f65")
						});
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
				{
					b.Property<Guid>("UserId")
						.HasColumnType("uuid");

					b.Property<string>("LoginProvider")
						.HasColumnType("text");

					b.Property<string>("Name")
						.HasColumnType("text");

					b.Property<string>("Value")
						.HasColumnType("text");

					b.HasKey("UserId", "LoginProvider", "Name");

					b.ToTable("AspNetUserTokens", "Identity");
				});

			modelBuilder.Entity("CustomCADs.Identity.Persistence.ShadowEntities.AppRefreshToken", b =>
				{
					b.HasOne("CustomCADs.Identity.Persistence.ShadowEntities.AppUser", "User")
						.WithMany("RefreshTokens")
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("User");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
				{
					b.HasOne("CustomCADs.Identity.Persistence.ShadowEntities.AppRole", null)
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
				{
					b.HasOne("CustomCADs.Identity.Persistence.ShadowEntities.AppUser", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
				{
					b.HasOne("CustomCADs.Identity.Persistence.ShadowEntities.AppUser", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
				{
					b.HasOne("CustomCADs.Identity.Persistence.ShadowEntities.AppRole", null)
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("CustomCADs.Identity.Persistence.ShadowEntities.AppUser", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
				{
					b.HasOne("CustomCADs.Identity.Persistence.ShadowEntities.AppUser", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("CustomCADs.Identity.Persistence.ShadowEntities.AppUser", b =>
				{
					b.Navigation("RefreshTokens");
				});
#pragma warning restore 612, 618
		}
	}
}
