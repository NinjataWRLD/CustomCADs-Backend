// <auto-generated />
using System;
using CustomCADs.Customs.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CustomCADs.Customs.Persistence.Migrations
{
    [DbContext(typeof(CustomsContext))]
    partial class CustomsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Customs")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CustomCADs.Customs.Domain.Customs.Custom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid")
                        .HasColumnName("BuyerId");

                    b.Property<string>("CustomStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CustomStatus");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Description");

                    b.Property<bool>("ForDelivery")
                        .HasColumnType("boolean")
                        .HasColumnName("ForDelivery");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.Property<DateTimeOffset>("OrderedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OrderedAt");

                    b.HasKey("Id");

                    b.ToTable("Customs", "Customs");
                });

            modelBuilder.Entity("CustomCADs.Customs.Domain.Customs.Entities.AcceptedCustom", b =>
                {
                    b.Property<Guid>("CustomId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("AcceptedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("AcceptedAt");

                    b.Property<Guid>("DesignerId")
                        .HasColumnType("uuid")
                        .HasColumnName("DesignerId");

                    b.HasKey("CustomId");

                    b.ToTable("AcceptedCustoms", "Customs");
                });

            modelBuilder.Entity("CustomCADs.Customs.Domain.Customs.Entities.CompletedCustom", b =>
                {
                    b.Property<Guid>("CustomId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("CustomizationId");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PaymentStatus");

                    b.Property<Guid?>("ShipmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("ShipmentId");

                    b.HasKey("CustomId");

                    b.ToTable("CompletedCustoms", "Customs");
                });

            modelBuilder.Entity("CustomCADs.Customs.Domain.Customs.Entities.FinishedCustom", b =>
                {
                    b.Property<Guid>("CustomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CadId")
                        .HasColumnType("uuid")
                        .HasColumnName("CadId");

                    b.Property<DateTimeOffset>("FinishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("FinishedAt");

                    b.Property<decimal>("Price")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("Price");

                    b.HasKey("CustomId");

                    b.ToTable("FinishedCustoms", "Customs");
                });

            modelBuilder.Entity("CustomCADs.Customs.Domain.Customs.Entities.AcceptedCustom", b =>
                {
                    b.HasOne("CustomCADs.Customs.Domain.Customs.Custom", null)
                        .WithOne("AcceptedCustom")
                        .HasForeignKey("CustomCADs.Customs.Domain.Customs.Entities.AcceptedCustom", "CustomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomCADs.Customs.Domain.Customs.Entities.CompletedCustom", b =>
                {
                    b.HasOne("CustomCADs.Customs.Domain.Customs.Custom", null)
                        .WithOne("CompletedCustom")
                        .HasForeignKey("CustomCADs.Customs.Domain.Customs.Entities.CompletedCustom", "CustomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomCADs.Customs.Domain.Customs.Entities.FinishedCustom", b =>
                {
                    b.HasOne("CustomCADs.Customs.Domain.Customs.Custom", null)
                        .WithOne("FinishedCustom")
                        .HasForeignKey("CustomCADs.Customs.Domain.Customs.Entities.FinishedCustom", "CustomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomCADs.Customs.Domain.Customs.Custom", b =>
                {
                    b.Navigation("AcceptedCustom");

                    b.Navigation("CompletedCustom");

                    b.Navigation("FinishedCustom");
                });
#pragma warning restore 612, 618
        }
    }
}
