// <auto-generated />
using System;
using CustomCADs.Accounts.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CustomCADs.Accounts.Persistence.Migrations
{
    [DbContext(typeof(AccountsContext))]
    partial class AccountsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Accounts")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CustomCADs.Accounts.Domain.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(62)
                        .HasColumnType("character varying(62)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .HasMaxLength(62)
                        .HasColumnType("character varying(62)")
                        .HasColumnName("LastName");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasColumnName("RoleName");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TimeZone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(62)
                        .HasColumnType("character varying(62)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleName");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Accounts", "Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2da61b05-1a27-4af9-9df2-be4f1f4e835f"),
                            Email = "ivanzlatinov006@gmail.com",
                            RoleName = "Client",
                            TimeZone = "Sofia/Europe",
                            Username = "For7a7a"
                        },
                        new
                        {
                            Id = new Guid("6d963818-23dc-4e9a-aaa8-b4c77252bc97"),
                            Email = "PDMatsaliev20@codingburgas.bg",
                            RoleName = "Contributor",
                            TimeZone = "Sofia/Europe",
                            Username = "PetarDMatsaliev"
                        },
                        new
                        {
                            Id = new Guid("0fb3212f-7d51-4586-8fc2-0f333ec9fbc1"),
                            Email = "boriskolev2006@gmail.com",
                            RoleName = "Designer",
                            TimeZone = "Sofia/Europe",
                            Username = "Oracle3000"
                        },
                        new
                        {
                            Id = new Guid("e995039c-a535-4f20-8288-7aadcb71b252"),
                            Email = "ivanangelov414@gmail.com",
                            RoleName = "Administrator",
                            TimeZone = "Sofia/Europe",
                            Username = "NinjataBG"
                        });
                });

            modelBuilder.Entity("CustomCADs.Accounts.Domain.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles", "Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Has access to Orders endpoints - can buy 3D Models from the Gallery and make and track Orders.",
                            Name = "Client"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Has access to Cads endpoints - can apply to upload his 3D Models to the Gallery, set their prices and track their status",
                            Name = "Contributor"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Has access to Cads and Designer endpoints - can upload his 3D Models straight to the Gallery, validate contributors' cads and finish clients' orders.",
                            Name = "Designer"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Has full access to Users, Roles, Orders, Cads, Categories and all other endpoints - can do anyhting.",
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("CustomCADs.Accounts.Domain.Accounts.Account", b =>
                {
                    b.HasOne("CustomCADs.Accounts.Domain.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleName")
                        .HasPrincipalKey("Name")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
